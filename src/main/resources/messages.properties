# === section ===
section.name.required = Section name is required.
section.name.size = Section name must be between {min} and {max} characters long.
section.cover.url = Section cover URL must start with HTTP or HTTPS protocol.
section.sort.value = Section sort value must be a positive number.
section.cover.image.format = Section cover image exceeds the size limit of {max} or is not in a supported format ({type}).
section.cover.image.notfound = Section cover image not found.
section.access = Sorry, you are unable to access this section or the section does not exist.

# === section group ===
sectionGroup.name.required = The section group name is required.
sectionGroup.name.size = The section group name must be between {min} and {max} characters in length.
sectionGroup.sort.value = The section group sort value must be a positive number.

# === tag ===
tag.name.required = The tag name is required.
tag.name.size = The tag name must be between {min} and {max} characters in length.
tag.name.duplicate = Sorry, the tag name already exists.
tag.sort.value = The tag sort value must be a positive number.

# === tag group ===
tagGroup.name.required = The tag group name is required.
tagGroup.name.size = The tag group name must be between {min} and {max} characters in length.
tagGroup.sort.value = The tag group sort value must be a positive number.

# === comment ===
comment.content.required = Comment content is required.
comment.content.size = The comment content must be between {min} and {max} characters in length.
comment.postId.required = The post Id for the comment is required.

# === reply ===
reply.content.required = Reply content is required.
reply.content.size = The reply content must be between {min} and {max} characters in length.
reply.create.invalid = Sorry, unable to create a reply.

# === post review queue ===
postReviewQueue.latestReviewResultTime.required = The estimated completion time for the review is required.
postReviewQueue.postId.required = The post Id for the review is required.
postReviewQueue.latestReviewResultTime.future = The estimated completion time of the review must be in the future.
postReviewQueue.pendingReview = Sorry, you can only claim posts that are currently pending review.
postReviewQueue.whetherToContinue = Sorry, you don't have permission to process the review request for this post.
postReviewQueue.received = Sorry, the review request for this post has already been claimed by another administrator.
postReviewQueue.notBeenPicked = Sorry, the review request for this post has not been claimed by any other administrator yet.

# === post ===
post.viewPage.ip.invalid = Invalid IP address. Please provide a valid IP address.
post.name.required = Post name is required.
post.name.size = Post name length should be between {min} and {max}.
post.cover.url = The post cover URL must start with HTTP or HTTPS.
post.contentLink.url = The post content URL must start with HTTP or HTTPS.
post.cover.image.format = The post cover file exceeds the maximum size of {max} or is not in a supported format ({type}).
post.cover.image.notfound = The post cover file could not be found.
post.access = Sorry, you cannot access this post or the post does not exist.
post.access.pendingReview = Sorry, you cannot access this post as it is either pending review or has been rejected.

# === message ===
message.name.required = Message name is required.
message.name.size = Message name length should be between {min} and {max}.
message.overview.required = Message overview is required.
message.overview.size = Message overview length should be between {min} and {max}.
message.sort.value = Message sort value must be a positive number.
message.receiver.required = Message receiver is required.
message.link.url = Message link must start with HTTP or HTTPS.

# === point ===
point.ruleName.required = Point rule name is required.
point.permissionRuleName.required = Point permission rule name is required.

# === config ===
config.root.secret.invalid = Invalid secret key.

# === user ===
user.alias.size = User alias length should be between {min} and {max}.
user.username.required = Username is required.
user.username.size = Username length should be between {min} and {max}.
user.username.exist = This username already exists.
user.password.required = Password is required.
user.password.size = Password length should be between {min} and {max}.
user.password.old.required = Old password is required.
user.password.old.size = Old password length should be between {min} and {max}.
user.password.notMatch = The new password does not match the old password.
user.usernameOrPassword.error = Incorrect username or password.

# === role ===
role.name.required = Role name is required.
role.name.size = Role name length should be between {min} and {max}.
role.sort.value = Role sort value must be a positive number.

# === permission ===
permission.name.required = Permission name is required.
permission.name.size = Permission name length should be between {min} and {max}.
permission.sort.value = Permission sort value must be a positive number.

# === menu ===
menu.name.required = Menu name is required.
menu.name.size = Menu name length should be between {min} and {max}.
menu.link.required = Menu link is required.
menu.link.url = Menu link must start with HTTP or HTTPS.
menu.sort.value = Menu sort value must be a positive number.

# === submenu ===
submenu.name.required = Submenu name is required.
submenu.name.size = Submenu name length should be between {min} and {max}.
submenu.link.required = Submenu link is required.
submenu.link.url = Submenu link must start with HTTP or HTTPS.
submenu.sort.value = Submenu sort value must be a positive number.

# === action ===
action.name.required = Action name is required.
action.name.size = Action name length should be between {min} and {max}.
action.sort.value = Action sort value must be a positive number
